// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RemoteApp
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class CollectionOperationsExtensions
    {
            /// <summary>
            /// Gets the list of collections details for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CollectionListResult ListSubscriptionCollections(this ICollectionOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).ListSubscriptionCollectionsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of collections details for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionListResult> ListSubscriptionCollectionsAsync( this ICollectionOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CollectionListResult> result = await operations.ListSubscriptionCollectionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the list of collections details in the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static CollectionListResult ListResourceGroupCollections(this ICollectionOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).ListResourceGroupCollectionsAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of collections details in the resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionListResult> ListResourceGroupCollectionsAsync( this ICollectionOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CollectionListResult> result = await operations.ListResourceGroupCollectionsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the collection details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static Collection Get(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the collection details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Collection> GetAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Collection> result = await operations.GetWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Create or update a collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='details'>
            /// The details of the created or updated collection
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static CollectionCreationDetailsWrapper CreateOrUpdate(this ICollectionOperations operations, CollectionCreationDetailsWrapper details, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).CreateOrUpdateAsync(details, collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='details'>
            /// The details of the created or updated collection
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionCreationDetailsWrapper> CreateOrUpdateAsync( this ICollectionOperations operations, CollectionCreationDetailsWrapper details, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CollectionCreationDetailsWrapper> result = await operations.CreateOrUpdateWithHttpMessagesAsync(details, collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Create or update a collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='details'>
            /// The details of the created or updated collection
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static CollectionCreationDetailsWrapper BeginCreateOrUpdate(this ICollectionOperations operations, CollectionCreationDetailsWrapper details, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).BeginCreateOrUpdateAsync(details, collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='details'>
            /// The details of the created or updated collection
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionCreationDetailsWrapper> BeginCreateOrUpdateAsync( this ICollectionOperations operations, CollectionCreationDetailsWrapper details, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CollectionCreationDetailsWrapper> result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(details, collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Delete the collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static void Delete(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete the collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static void BeginDelete(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((ICollectionOperations)s).BeginDeleteAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of published applications in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static IList<PublishedApplicationDetails> ListPublishedApp(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).ListPublishedAppAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of published applications in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PublishedApplicationDetails>> ListPublishedAppAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<PublishedApplicationDetails>> result = await operations.ListPublishedAppWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the specified published application in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='alias'>
            /// The alias for the application.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static PublishedApplicationDetails GetPublishedApp(this ICollectionOperations operations, string collectionName, string alias, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetPublishedAppAsync(collectionName, alias, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified published application in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='alias'>
            /// The alias for the application.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishedApplicationDetails> GetPublishedAppAsync( this ICollectionOperations operations, string collectionName, string alias, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<PublishedApplicationDetails> result = await operations.GetPublishedAppWithHttpMessagesAsync(collectionName, alias, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Publishes a new application or updates a previously published application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationDetails'>
            /// Details of the applicaton to publish or modify
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='alias'>
            /// The alias for the application.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static PublishingOperationResult PublishOrUpdateApplication(this ICollectionOperations operations, ApplicationDetails applicationDetails, string collectionName, string alias, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).PublishOrUpdateApplicationAsync(applicationDetails, collectionName, alias, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Publishes a new application or updates a previously published application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationDetails'>
            /// Details of the applicaton to publish or modify
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='alias'>
            /// The alias for the application.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishingOperationResult> PublishOrUpdateApplicationAsync( this ICollectionOperations operations, ApplicationDetails applicationDetails, string collectionName, string alias, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<PublishingOperationResult> result = await operations.PublishOrUpdateApplicationWithHttpMessagesAsync(applicationDetails, collectionName, alias, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Unpublishes published application matching the application alias (short
            /// unique name) from the collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='alias'>
            /// The alias for the application.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static PublishingOperationResult Unpublish(this ICollectionOperations operations, string collectionName, string alias, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).UnpublishAsync(collectionName, alias, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unpublishes published application matching the application alias (short
            /// unique name) from the collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='alias'>
            /// The alias for the application.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishingOperationResult> UnpublishAsync( this ICollectionOperations operations, string collectionName, string alias, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<PublishingOperationResult> result = await operations.UnpublishWithHttpMessagesAsync(collectionName, alias, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets a list of sessions on the current collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static SessionListResult SessionList(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).SessionListAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sessions on the current collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionListResult> SessionListAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SessionListResult> result = await operations.SessionListWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the specified user's session on the current collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static Session GetSession(this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetSessionAsync(collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified user's session on the current collection
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Session> GetSessionAsync( this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<Session> result = await operations.GetSessionWithHttpMessagesAsync(collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Disconnects the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static void SessionDisconnect(this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((ICollectionOperations)s).SessionDisconnectAsync(collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disconnects the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SessionDisconnectAsync( this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SessionDisconnectWithHttpMessagesAsync(collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Logs off the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static void SessionLogOff(this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((ICollectionOperations)s).SessionLogOffAsync(collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logs off the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SessionLogOffAsync( this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SessionLogOffWithHttpMessagesAsync(collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sends a message to the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageDetails'>
            /// Session message details
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static void SessionSendMessage(this ICollectionOperations operations, SessionSendMessageCommandParameter messageDetails, string collectionName, string userUpn, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((ICollectionOperations)s).SessionSendMessageAsync(messageDetails, collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a message to the specified user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='messageDetails'>
            /// Session message details
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SessionSendMessageAsync( this ICollectionOperations operations, SessionSendMessageCommandParameter messageDetails, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SessionSendMessageWithHttpMessagesAsync(messageDetails, collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of applications available in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static IList<StartMenuApplication> ListStartMenuApps(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).ListStartMenuAppsAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of applications available in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StartMenuApplication>> ListStartMenuAppsAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<IList<StartMenuApplication>> result = await operations.ListStartMenuAppsWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the specified Start Menu application available in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The identifier of the application.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static StartMenuApplication GetStartMenuApp(this ICollectionOperations operations, string applicationId, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetStartMenuAppAsync(applicationId, collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Start Menu application available in this collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The identifier of the application.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StartMenuApplication> GetStartMenuAppAsync( this ICollectionOperations operations, string applicationId, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<StartMenuApplication> result = await operations.GetStartMenuAppWithHttpMessagesAsync(applicationId, collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Generates a CSV file of collection usage details and returns the URI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static UsageDetailsInfo GetUsageDetails(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetUsageDetailsAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates a CSV file of collection usage details and returns the URI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsageDetailsInfo> GetUsageDetailsAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<UsageDetailsInfo> result = await operations.GetUsageDetailsWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets a summary of usage data for all users in the collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static CollectionUsageSummaryListResult GetUsageSummaryList(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetUsageSummaryListAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a summary of usage data for all users in the collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionUsageSummaryListResult> GetUsageSummaryListAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CollectionUsageSummaryListResult> result = await operations.GetUsageSummaryListWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets a summary of collection usage data for the specified user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static CollectionUsageSummary GetUsageSummary(this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetUsageSummaryAsync(collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a summary of collection usage data for the specified user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CollectionUsageSummary> GetUsageSummaryAsync( this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<CollectionUsageSummary> result = await operations.GetUsageSummaryWithHttpMessagesAsync(collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets a list of all RemoteApp users associated with the given collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static SecurityPrincipalInfoListResult GetUsers(this ICollectionOperations operations, string collectionName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetUsersAsync(collectionName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all RemoteApp users associated with the given collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityPrincipalInfoListResult> GetUsersAsync( this ICollectionOperations operations, string collectionName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SecurityPrincipalInfoListResult> result = await operations.GetUsersWithHttpMessagesAsync(collectionName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets a RemoteApp user by their UPN.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static SecurityPrincipalInfo GetUser(this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).GetUserAsync(collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a RemoteApp user by their UPN.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityPrincipalInfo> GetUserAsync( this ICollectionOperations operations, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SecurityPrincipalInfo> result = await operations.GetUserWithHttpMessagesAsync(collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Adds a user to the given collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityPrincipal'>
            /// A RemoteApp user to add.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static SecurityPrincipalOperationErrorDetails AddSecurityPrincipal(this ICollectionOperations operations, SecurityPrincipal securityPrincipal, string collectionName, string userUpn, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).AddSecurityPrincipalAsync(securityPrincipal, collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a user to the given collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityPrincipal'>
            /// A RemoteApp user to add.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityPrincipalOperationErrorDetails> AddSecurityPrincipalAsync( this ICollectionOperations operations, SecurityPrincipal securityPrincipal, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SecurityPrincipalOperationErrorDetails> result = await operations.AddSecurityPrincipalWithHttpMessagesAsync(securityPrincipal, collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Deletes a user from the given collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityPrincipal'>
            /// The RemoteApp user to remove.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            public static SecurityPrincipalOperationErrorDetails DeleteSecurityPrincipal(this ICollectionOperations operations, SecurityPrincipal securityPrincipal, string collectionName, string userUpn, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICollectionOperations)s).DeleteSecurityPrincipalAsync(securityPrincipal, collectionName, userUpn, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a user from the given collection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='securityPrincipal'>
            /// The RemoteApp user to remove.
            /// </param>
            /// <param name='collectionName'>
            /// The collection name.
            /// </param>
            /// <param name='userUpn'>
            /// The UPN of the user
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityPrincipalOperationErrorDetails> DeleteSecurityPrincipalAsync( this ICollectionOperations operations, SecurityPrincipal securityPrincipal, string collectionName, string userUpn, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                AzureOperationResponse<SecurityPrincipalOperationErrorDetails> result = await operations.DeleteSecurityPrincipalWithHttpMessagesAsync(securityPrincipal, collectionName, userUpn, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
