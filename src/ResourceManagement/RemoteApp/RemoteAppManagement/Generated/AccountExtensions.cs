// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RemoteApp
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class AccountExtensions
    {
            /// <summary>
            /// Gets the account associated with the subscription id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static AccountDetailsWrapper GetAccountInfo(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).GetAccountInfoAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the account associated with the subscription id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountDetailsWrapper> GetAccountInfoAsync( this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<AccountDetailsWrapper> result = await operations.GetAccountInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Updates the account PrivacyUrl and WorkspaceName.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountInfo'>
            /// The new PrivacyUrl and WorkspaceName
            /// </param>
            public static AccountDetailsWrapper UpdateAccount(this IAccount operations, AccountDetailsWrapper accountInfo)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).UpdateAccountAsync(accountInfo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the account PrivacyUrl and WorkspaceName.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountInfo'>
            /// The new PrivacyUrl and WorkspaceName
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccountDetailsWrapper> UpdateAccountAsync( this IAccount operations, AccountDetailsWrapper accountInfo, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<AccountDetailsWrapper> result = await operations.UpdateAccountWithHttpMessagesAsync(accountInfo, null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Activates billing for the account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ActivateAccountBilling(this IAccount operations)
            {
                Task.Factory.StartNew(s => ((IAccount)s).ActivateAccountBillingAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activates billing for the account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateAccountBillingAsync( this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ActivateAccountBillingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the available billing plans for the account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BillingPlanPropertiesWrapper Plans(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).PlansAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the available billing plans for the account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BillingPlanPropertiesWrapper> PlansAsync( this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<BillingPlanPropertiesWrapper> result = await operations.PlansWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

            /// <summary>
            /// Gets the supported locations to create collections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LocationPropertiesWrapper Locations(this IAccount operations)
            {
                return Task.Factory.StartNew(s => ((IAccount)s).LocationsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the supported locations to create collections.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LocationPropertiesWrapper> LocationsAsync( this IAccount operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                HttpOperationResponse<LocationPropertiesWrapper> result = await operations.LocationsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
                return result.Body;
            }

    }
}
